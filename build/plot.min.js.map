{"version":3,"file":"plot.min.js","sources":["../nxtx.ts","../src/plot.ts"],"sourcesContent":["export interface Node {\n    type: NodeType,\n    value?: any,\n    name?: string,\n    args?: Array<Node>\n}\nexport enum NodeType {\n    Paragraph = 1,\n    Command,\n    Text,\n    Block,\n    Html,\n    Node,\n    Dictionary = 11,\n    Array,\n    Number,\n    String\n}\n\nexport interface ArgumentCheck {\n    expected: NodeType,\n    actual: NodeType,\n    index: number\n}\nexport interface ArgumentCheckResult {\n    ok: boolean,\n    invalid: Array<ArgumentCheck>\n}\n\ntype CommandResultTypes = Node | HTMLElement | Text | undefined | void\ntype CommandResultType = Promise<CommandResultTypes> | CommandResultTypes\nexport type CommandResult = Array<CommandResultType> | CommandResultType\nexport type CommandFunction = (...args:Array<Node>) => CommandResult\n\nexport interface Package {\n    name: string,\n    requires?: Array<string>,\n    commands?: { [name:string]: CommandFunction },\n    preprocessors?: { [name:string]: CommandFunction },\n    hooks?: { prerender?:()=>void, midrender?:()=>void, postrender?:()=>void }\n}\n\nexport type RenderEvent = 'prerender'|'midrender'|'postrender'\n\nexport interface INxtx {\n    registerCommand: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    registerPreprocessor: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    verifyArguments: (types:Array<NodeType>, ...args:Array<Node>) => ArgumentCheckResult\n    registerPackage: (pkg:Package) => void\n\n    parse: (code:string) => Array<Node>\n    render: (code:string, root:HTMLElement) => Promise<void>\n\n    text: (content:string) => Text\n    htmlLite: (nodeName:string, attributes:object, ...children:Array<HTMLElement|string>) => HTMLElement\n    html: (nodeName:string, attributes:object, ...children:Array<Promise<HTMLElement|Node|string>|HTMLElement|Node|string>) => Promise<HTMLElement>\n\n    on: (event:RenderEvent, handler:()=>void) => void\n    off: (event:RenderEvent, handler:()=>void) => void\n}","import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement> nxtx.htmlLite(\"canvas\", {});\r\n\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const canvasHeight = canvas.height = 100;\r\n            canvas.width = 100;\r\n\r\n            canvas.style.height = \"200px\";\r\n            canvas.style.width = \"400px\";\r\n\r\n            const normalizedY = normalize(y);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < y.length-1; i++) {\r\n                ctx.moveTo(i, y[i] * canvasHeight);\r\n                ctx.lineTo(i+1,y[i+1]*canvasHeight);\r\n                ctx.stroke();\r\n            }\r\n\r\n            return {type:NodeType.Html,value:canvas};\r\n        }\r\n    },\r\n};\r\n\r\nfunction normalize(array) {\r\n\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\nif(nxtx !== undefined)\r\n    nxtx.registerPackage(pkg);\r\nexport default pkg;"],"names":["NodeType","pkg","name","commands","plot","dictionaryNode","_a","y","canvas","nxtx","htmlLite","ctx","getContext","canvasHeight","height","width","style","array","min","max","Math","map","e","beginPath","i","length","moveTo","lineTo","stroke","type","Html","value","undefined","registerPackage"],"mappings":"iCAMA,IAAYA,GAAZ,SAAYA,GACRA,6BACAA,yBACAA,mBACAA,qBACAA,mBACAA,mBACAA,gCACAA,sBACAA,wBACAA,wBAVJ,CAAYA,IAAAA,OCFZ,IAAMC,EAAe,CACjBC,KAAM,OACNC,SAAU,CACNC,KAAM,SAACC,GACC,IAAAC,UAAOC,eACLC,qBAA6BC,KAAKC,SAAS,SAAU,KAErDC,EAAMH,EAAOI,WAAW,MAExBC,EAAeL,EAAOM,OAAS,IACrCN,EAAOO,MAAQ,IAEfP,EAAOQ,MAAMF,OAAS,QACtBN,EAAOQ,MAAMD,MAAQ,QAErB,IAcOE,EAETC,EACAC,EAHSF,EAduBV,EAgBhCW,EAAME,KAAKF,UAALE,KAAYH,GAClBE,EAAMC,KAAKD,UAALC,KAAYH,GAASC,EAC1BD,EAAMI,IAAI,SAAAC,GAAK,OAACA,EAAIJ,GAAOC,IAhB1BR,EAAIY,YACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAEkB,OAAO,EAAGD,IAC5Bb,EAAIe,OAAOF,EAAGjB,EAAEiB,GAAKX,GACrBF,EAAIgB,OAAOH,EAAE,EAAEjB,EAAEiB,EAAE,GAAGX,GACtBF,EAAIiB,SAGR,MAAO,CAACC,KAAK7B,EAAS8B,KAAKC,MAAMvB,kBAWjCwB,IAATvB,MACCA,KAAKwB,gBAAgBhC"}