{"version":3,"file":"plot.min.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            console.log(\"Drawing..\");\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const yValue = dictionaryNode.value.y.value.map(e => e.value);\r\n\r\n            const offset = 30;\r\n            const graphMarginTop = 10;\r\n            const graphMarginBottom = 10;\r\n            const graphMarginRight = 10;\r\n            const graphMarginLeft = 30;\r\n\r\n            const canvasHeight = canvas.height = 200;\r\n            const canvasWidth = canvas.width = 400;\r\n\r\n            const graphHeight = canvasHeight - graphMarginTop - graphMarginBottom;\r\n            const graphWidth = canvasWidth - graphMarginLeft - graphMarginRight;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const normalizedY = normalize(yValue);\r\n            const spacing = graphWidth / (normalizedY.length - 1);\r\n\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5, 0.5);\r\n\r\n\r\n            ///////////// Y labels\r\n            const yLabels = generateYLabels(yValue, 10);\r\n            const verticalSpacing = graphHeight / (yLabels.length - 1);\r\n\r\n            ctx.beginPath();\r\n            const labelLengths = yLabels.map(x => getStringLength(x));\r\n            console.log(yLabels.map(x => getStringLength(x)));\r\n            for (let i = 0; i < yLabels.length; i++) {\r\n                line(ctx, offset, (verticalSpacing * i) + graphMarginTop, offset + 5, (verticalSpacing * i) + graphMarginTop, 1);\r\n                ctx.fillText(String(yLabels[yLabels.length - (i + 1)]),\r\n                    graphMarginLeft - Math.max(...labelLengths),\r\n                    i * verticalSpacing + graphMarginTop + 4)\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            ///////////// X Labels\r\n            const XLabelAmount = Math.round(graphWidth / 30);\r\n\r\n            ///////////// Graph\r\n            ctx.beginPath();\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx, i * spacing + graphMarginLeft, graphHeight - (normalizedY[i] * graphHeight) + graphMarginTop,\r\n                    (i + 1) * spacing + graphMarginLeft, graphHeight - (normalizedY[i + 1] * graphHeight) + graphMarginTop, 1);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n\r\n            //////// Borders\r\n            line(ctx, graphMarginLeft, graphMarginTop, graphMarginLeft, canvasHeight - graphMarginBottom); //left\r\n            line(ctx, canvasWidth - graphMarginRight, graphMarginTop, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //left\r\n\r\n            line(ctx, graphMarginLeft, graphMarginTop, canvasWidth - graphMarginRight, graphMarginTop); //top\r\n            line(ctx, graphMarginLeft, canvasHeight - graphMarginBottom, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //bottom\r\n\r\n\r\n            ctx.stroke();\r\n            console.log(\"Done drawing\");\r\n\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction generateYLabels(values, amount) {\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const delta = (max - min) / (amount - 1);\r\n    const output = [];\r\n    for (let i = 0; i <= (amount - 1); i++)\r\n        output.push(Math.round((min + (delta * i)*10))/10);\r\n\r\n    return output;\r\n}\r\n\r\nfunction getStringLength(input) {\r\n    console.log(input);\r\n    const inputString = input.toString();\r\n    console.log(inputString);\r\n     let number = inputString.length * 8;\r\n     console.log(number);\r\n     if(input < 0) {\r\n         number -= 4;\r\n     }\r\n     if (inputString.includes('.')) {\r\n        console.log(\"dot\");\r\n        number -= 4;\r\n    }\r\n     console.log(number);\r\n     console.log(\"outputnumber\",number);\r\n    return number\r\n}\r\n\r\nfunction line(context, x1, y1, x2, y2, lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\n\r\nif (nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":["pkg","name","commands","plot","dictionaryNode","console","log","_a","canvas","nxtx","htmlLite","ctx","getContext","yValue","value","y","map","e","canvasHeight","height","canvasWidth","width","graphHeight","graphWidth","style","margin","display","array","min","max","normalizedY","Math","spacing","length","imageSmoothingEnabled","translate","yLabels","values","amount","delta","output","i","push","round","generateYLabels","verticalSpacing","beginPath","labelLengths","x","getStringLength","line","offset","fillText","String","stroke","closePath","lineCap","input","inputString","toString","number","includes","context","x1","y1","x2","y2","lineWidth","moveTo","lineTo","registerPackage"],"mappings":"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"}