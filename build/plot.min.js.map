{"version":3,"file":"plot.min.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            console.log(\"Drawing..\");\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n\r\n            const yValue = dictionaryNode.value.y.value.map(e => e.value);\r\n\r\n            console.log(yValue);\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const canvasHeight = canvas.height = 200;\r\n            const canvasWidth = canvas.width = 400;\r\n\r\n            const offset = 30;\r\n            const graphHeight = canvasHeight -offset;\r\n            const graphWidth = canvasWidth -offset;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const normalizedY = normalize(yValue);\r\n\r\n\r\n\r\n            const spacing =graphWidth / (normalizedY.length-1);\r\n            console.log(\"spacing \",spacing);\r\n\r\n            ctx.beginPath();\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5,0.5);\r\n\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx,i * spacing + offset, graphHeight-(normalizedY[i] * graphHeight),\r\n                    (i+1)*spacing + offset, graphHeight-(normalizedY[i + 1] * graphHeight),2);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n            line(ctx,offset,0,offset,canvasHeight-offset+10);\r\n            line(ctx, offset-10,canvasHeight-offset ,canvasWidth,canvasHeight-offset);\r\n\r\n\r\n            ctx.stroke();\r\n            console.log(\"Done drawing\");\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction line(context,x1,y1,x2,y2,lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1,y1);\r\n    context.lineTo(x2,y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\nif(nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":["pkg","name","commands","plot","dictionaryNode","console","log","_a","canvas","nxtx","htmlLite","yValue","value","y","map","e","ctx","getContext","canvasHeight","height","canvasWidth","width","graphHeight","graphWidth","style","margin","display","array","min","max","normalizedY","Math","spacing","length","beginPath","imageSmoothingEnabled","translate","i","line","stroke","lineCap","offset","context","x1","y1","x2","y2","lineWidth","moveTo","lineTo","registerPackage"],"mappings":"iCAIA,IAAMA,EAAe,CACjBC,KAAM,OACNC,SAAU,CACNC,KAAM,SAACC,GACHC,QAAQC,IAAI,aACR,IAAAC,UACEC,gCAA4BC,KAAKC,SAAS,SAAU,KAEpDC,EAASP,EAAeQ,MAAMC,EAAED,MAAME,IAAI,SAAAC,GAAK,OAAAA,EAAEH,QAEvDP,QAAQC,IAAIK,GACZ,IAAMK,EAAMR,EAAOS,WAAW,MAExBC,EAAeV,EAAOW,OAAS,IAC/BC,EAAcZ,EAAOa,MAAQ,IAG7BC,EAAcJ,EADL,GAETK,EAAaH,EAFJ,GAIfZ,EAAOgB,MAAMC,OAAS,OACtBjB,EAAOgB,MAAME,QAAU,QACvB,IAsCOC,EACTC,EACAC,EAxCQC,GAsCCH,EAtCuBhB,EAuChCiB,EAAMG,KAAKH,UAALG,KAAYJ,GAClBE,EAAME,KAAKF,UAALE,KAAYJ,GAASC,EAC1BD,EAAMb,IAAI,SAAAC,GAAK,OAACA,EAAIa,GAAOC,KArCpBG,EAAST,GAAcO,EAAYG,OAAO,GAChD5B,QAAQC,IAAI,WAAW0B,GAEvBhB,EAAIkB,YACJlB,EAAImB,uBAAwB,EAC5BnB,EAAIoB,UAAU,GAAI,IAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAYG,OAAS,EAAGI,IACxCC,EAAKtB,EAAIqB,EAAIL,EAlBF,GAkBoBV,EAAaQ,EAAYO,GAAKf,GACxDe,EAAE,GAAGL,EAnBC,GAmBiBV,EAAaQ,EAAYO,EAAI,GAAKf,EAAa,GAY/E,OATAN,EAAIuB,SACJvB,EAAIwB,QAAU,QAEdF,EAAKtB,EAzBU,GAyBC,EAzBD,GAyBUE,EAzBV,GAyB8B,IAC7CoB,EAAKtB,EAAKyB,GAAUvB,EA1BL,GA0B0BE,EAAYF,EA1BtC,IA6BfF,EAAIuB,SACJlC,QAAQC,IAAI,gBACLE,KAMnB,SAAS8B,EAAKI,EAAQC,EAAGC,EAAGC,EAAGC,EAAGC,gBAAAA,KAC9BL,EAAQK,UAAYA,EACpBL,EAAQM,OAAOL,EAAGC,GAClBF,EAAQO,OAAOJ,EAAGC,UASnBrC,MAAMA,KAAKyC,gBAAgBlD"}