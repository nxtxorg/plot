{"version":3,"file":"plot.min.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ninterface Line {\r\n    x:number[],\r\n    y:number[],\r\n    colour?:string\r\n}\r\n\r\ninterface Options {\r\n    y: {\r\n        label?:string,\r\n        postfix?:string,\r\n        prefix?: string,\r\n        decimals?: number,\r\n        values: number[],\r\n\r\n    },\r\n    lines?:Line[]\r\n}\r\n\r\ndeclare const nxtx: INxtx;\r\nconst defaultOptions : Options = {\r\n    y: {\r\n        label:\"\",\r\n        postfix:\"\",\r\n        prefix: \"\",\r\n        decimals: 0,\r\n        values: [],\r\n    },\r\n    lines:[],\r\n};\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (optionsNode: Node) => {\r\n            const options : Options = Object.assign({}, defaultOptions, nxtx.jsArgument(optionsNode));\r\n            //let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n\r\n            const normalizedY = normalize(options.y.values);\r\n            const yLabels = generateYLabels(options.y.values, 10);\r\n            const labelLengths = yLabels.map(x => getStringLength(x));\r\n            const yLabelLength = Math.max(...labelLengths);\r\n            const graphMarginTop = 10;\r\n            const graphMarginBottom = 20;\r\n            const graphMarginRight = 10;\r\n\r\n            let graphMarginLeft = 30;\r\n            if(graphMarginLeft < yLabelLength){\r\n                graphMarginLeft = yLabelLength;\r\n            }\r\n\r\n            const canvasHeight = canvas.height = 220;\r\n            const canvasWidth = canvas.width = 400;\r\n\r\n            const graphHeight = canvasHeight - graphMarginTop - graphMarginBottom;\r\n            const graphWidth = canvasWidth - graphMarginLeft - graphMarginRight;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const spacing = graphWidth / (normalizedY.length - 1);\r\n\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5, 0.5);\r\n\r\n\r\n            ///////////// Y labels\r\n            ctx.textAlign = \"right\";\r\n            const verticalSpacing = graphHeight / (yLabels.length - 1);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < yLabels.length; i++) {\r\n                line(ctx, graphMarginLeft, (verticalSpacing * i) + graphMarginTop, graphMarginLeft + 5, (verticalSpacing * i) + graphMarginTop, 1);\r\n                ctx.fillText(String(yLabels[yLabels.length - (i + 1)]),\r\n                    graphMarginLeft - 4,\r\n                    i * verticalSpacing + graphMarginTop + 4)\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            ///////////// X Labels\r\n            const xMaxAmount = Math.round(graphWidth / 30);\r\n            const xAmount = options.y.values.length;\r\n\r\n            const xSpacing = graphWidth / xAmount;\r\n            ctx.beginPath();\r\n            if(xAmount < xMaxAmount){\r\n                for(let i = 0; i < xAmount+1 ; i++){\r\n                    ctx.fillText((i+1).toString(),(i * xSpacing) + graphMarginLeft+4,canvasHeight-graphMarginBottom+11);\r\n                    line(ctx,(i * xSpacing) + graphMarginLeft,canvasHeight-graphMarginBottom,(i * xSpacing) + graphMarginLeft,canvasHeight-graphMarginBottom-4,1)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for(let i = 0; i < xMaxAmount+1 ; i++){\r\n                    ctx.fillText((i+1).toString(),(i * (graphWidth/xMaxAmount)) + graphMarginLeft+4,canvasHeight-graphMarginBottom+11);\r\n                    line(ctx,(i * (graphWidth/xMaxAmount)) + graphMarginLeft,canvasHeight-graphMarginBottom,(i * (graphWidth/xMaxAmount)) + graphMarginLeft,canvasHeight-graphMarginBottom-4,1)\r\n                }\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            /////// Lines\r\n            for(let i = 0; i < options.lines.length;i++){\r\n                ctx.beginPath();\r\n                ctx.strokeStyle = options.lines[i].colour || \"black\";\r\n                line(ctx,options.lines[i].x[0]+graphMarginLeft,options.lines[i].y[0]+graphMarginTop,options.lines[i].x[1]+graphMarginLeft,options.lines[i].y[1]+graphMarginTop,0.5);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }\r\n            ctx.strokeStyle = \"black\";\r\n\r\n            ///////////// Graph\r\n            ctx.beginPath();\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx, i * spacing + graphMarginLeft, graphHeight - (normalizedY[i] * graphHeight) + graphMarginTop,\r\n                    (i + 1) * spacing + graphMarginLeft, graphHeight - (normalizedY[i + 1] * graphHeight) + graphMarginTop, 1);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n\r\n            //////// Borders\r\n            line(ctx, graphMarginLeft, graphMarginTop, graphMarginLeft, canvasHeight - graphMarginBottom); //left\r\n            line(ctx, canvasWidth - graphMarginRight, graphMarginTop, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //left\r\n\r\n            line(ctx, graphMarginLeft, graphMarginTop, canvasWidth - graphMarginRight, graphMarginTop); //top\r\n            line(ctx, graphMarginLeft, canvasHeight - graphMarginBottom, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //bottom\r\n\r\n\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n\r\n\r\n\r\n\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction generateYLabels(values, amount) {\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const delta = (max - min) / (amount - 1);\r\n    const output = [];\r\n    for (let i = 0; i <= (amount - 1); i++)\r\n        output.push(Math.round(((min + (delta * i))*10))/10);\r\n\r\n    return output;\r\n}\r\n\r\nfunction getStringLength(input) {\r\n    const inputString = input.toString();\r\n     let number = inputString.length * 6 + 4;\r\n     if(input < 0) {\r\n         number -= 2;\r\n     }\r\n     if (inputString.includes('.')) {\r\n        number -= 4;\r\n    }\r\n    return number\r\n}\r\n\r\nfunction line(context, x1, y1, x2, y2, lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\n\r\nif (nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":["defaultOptions","y","label","postfix","prefix","decimals","values","lines","pkg","name","commands","plot","optionsNode","array","min","max","options","Object","assign","nxtx","jsArgument","canvas","htmlLite","ctx","getContext","normalizedY","Math","map","e","yLabels","amount","delta","output","i","push","round","generateYLabels","labelLengths","x","input","inputString","toString","number","length","includes","getStringLength","yLabelLength","graphMarginLeft","canvasHeight","height","canvasWidth","width","graphHeight","graphWidth","style","margin","display","spacing","imageSmoothingEnabled","translate","textAlign","verticalSpacing","beginPath","line","fillText","String","stroke","closePath","xMaxAmount","xAmount","xSpacing","strokeStyle","colour","lineCap","context","x1","y1","x2","y2","lineWidth","moveTo","lineTo","registerPackage"],"mappings":"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"}