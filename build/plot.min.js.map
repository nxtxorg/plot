{"version":3,"file":"plot.min.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            console.log(\"Drawing..\");\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const yValue = dictionaryNode.value.y.value.map(e => e.value);\r\n\r\n            const offset = 30;\r\n            const graphMarginTop = 10;\r\n            const graphMarginBottom = 30;\r\n            const graphMarginRight = 30;\r\n            const graphMarginLeft = 30;\r\n\r\n            const canvasHeight = canvas.height = 250;\r\n            const canvasWidth = canvas.width = 500;\r\n\r\n            const graphHeight = canvasHeight - graphMarginTop - graphMarginBottom;\r\n            const graphWidth = canvasWidth - offset;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const normalizedY = normalize(yValue);\r\n            const spacing = graphWidth / (normalizedY.length - 1);\r\n\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5, 0.5);\r\n\r\n\r\n            ///////////// Vertical labels\r\n            const yLabels = generateYLabels(yValue, 10);\r\n            const verticalSpacing = graphHeight / (yLabels.length - 1);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < yLabels.length; i++) {\r\n                line(ctx, offset, (verticalSpacing * i)+graphMarginTop, offset + 5, (verticalSpacing * i)+graphMarginTop, 1);\r\n                ctx.fillText(String(Math.round(yLabels[i])), 0, i * verticalSpacing + graphMarginTop + 4);\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n\r\n            ///////////// Graph\r\n            ctx.beginPath();\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx, i * spacing + offset, graphHeight - (normalizedY[i] * graphHeight),\r\n                    (i + 1) * spacing + offset, graphHeight - (normalizedY[i + 1] * graphHeight), 1);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n\r\n            //////// Borders\r\n            line(ctx, offset, graphMarginTop, offset, canvasHeight - graphMarginBottom);\r\n            line(ctx, graphMarginLeft, canvasHeight - offset, canvasWidth - graphMarginRight, canvasHeight - offset);\r\n\r\n\r\n            ctx.stroke();\r\n            console.log(\"Done drawing\");\r\n\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction generateYLabels(values, amount) {\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const delta = (max - min) / (amount - 1);\r\n    const output = [];\r\n    for (let i = 0; i <= (amount - 1); i++)\r\n        output.push(min + (delta * i));\r\n\r\n    return output;\r\n}\r\n\r\nfunction line(context, x1, y1, x2, y2, lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\n\r\nif (nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":["pkg","name","commands","plot","dictionaryNode","console","log","_a","canvas","nxtx","htmlLite","ctx","getContext","yValue","value","y","map","e","canvasHeight","height","canvasWidth","width","graphHeight","graphWidth","style","margin","display","array","min","max","normalizedY","Math","spacing","length","imageSmoothingEnabled","translate","yLabels","values","amount","delta","output","i","push","generateYLabels","verticalSpacing","beginPath","line","offset","fillText","String","round","stroke","closePath","lineCap","context","x1","y1","x2","y2","lineWidth","moveTo","lineTo","registerPackage"],"mappings":"iCAIA,IAAMA,EAAe,CACjBC,KAAM,OACNC,SAAU,CACNC,KAAM,SAACC,GACHC,QAAQC,IAAI,aACR,IAAAC,UACEC,gCAA4BC,KAAKC,SAAS,SAAU,KACpDC,EAAMH,EAAOI,WAAW,MAExBC,EAAST,EAAeU,MAAMC,EAAED,MAAME,IAAI,SAAAC,GAAK,OAAAA,EAAEH,QAQjDI,EAAeV,EAAOW,OAAS,IAC/BC,EAAcZ,EAAOa,MAAQ,IAE7BC,EAAcJ,EARG,GACG,GAQpBK,EAAaH,EAVJ,GAYfZ,EAAOgB,MAAMC,OAAS,OACtBjB,EAAOgB,MAAME,QAAU,QACvB,IAgEOC,EACTC,EACAC,EAlEQC,GAgECH,EAhEuBd,EAiEhCe,EAAMG,KAAKH,UAALG,KAAYJ,GAClBE,EAAME,KAAKF,UAALE,KAAYJ,GAASC,EAC1BD,EAAMX,IAAI,SAAAC,GAAK,OAACA,EAAIW,GAAOC,KAlEpBG,EAAUT,GAAcO,EAAYG,OAAS,GAEnDtB,EAAIuB,uBAAwB,EAC5BvB,EAAIwB,UAAU,GAAK,IAInB,IAAMC,EAqClB,SAAyBC,EAAQC,GAM7B,IALA,IAAMV,EAAMG,KAAKH,UAALG,KAAYM,GAGlBE,GAFMR,KAAKF,UAALE,KAAYM,GAEHT,IAAQU,EAAS,GAChCE,EAAS,GACNC,EAAI,EAAGA,GAAMH,EAAS,EAAIG,IAC/BD,EAAOE,KAAKd,EAAOW,EAAQE,GAE/B,OAAOD,EA9CiBG,CAAgB9B,EAAQ,IAClC+B,EAAkBtB,GAAec,EAAQH,OAAS,GAExDtB,EAAIkC,YACJ,IAAK,IAAIJ,EAAI,EAAGA,EAAIL,EAAQH,OAAQQ,IAChCK,EAAKnC,EA3BM,GA2BQiC,EAAkBH,EA1BlB,GA0BqCM,GAAaH,EAAkBH,EA1BpE,GA0BuF,GAC1G9B,EAAIqC,SAASC,OAAOlB,KAAKmB,MAAMd,EAAQK,KAAM,EAAGA,EAAIG,EA3BjC,GA2BoE,GAE3FjC,EAAIwC,SACJxC,EAAIyC,YAIJzC,EAAIkC,YACJ,IAASJ,EAAI,EAAGA,EAAIX,EAAYG,OAAS,EAAGQ,IACxCK,EAAKnC,EAAK8B,EAAIT,EArCH,GAqCqBV,EAAeQ,EAAYW,GAAKnB,GAC3DmB,EAAI,GAAKT,EAtCH,GAsCqBV,EAAeQ,EAAYW,EAAI,GAAKnB,EAAc,GAetF,OAZAX,EAAIwC,SACJxC,EAAI0C,QAAU,QAIdP,EAAKnC,EA9CU,GACQ,GADR,GA8C2BO,EA5ChB,IA6C1B4B,EAAKnC,EA3CmB,GA2CGO,EA/CZ,GA+CmCE,EA5CzB,GA4CyDF,EA/CnE,IAkDfP,EAAIwC,SACJ9C,QAAQC,IAAI,gBAELE,KAkBnB,SAASsC,EAAKQ,EAASC,EAAIC,EAAIC,EAAIC,EAAIC,gBAAAA,KACnCL,EAAQK,UAAYA,EACpBL,EAAQM,OAAOL,EAAIC,GACnBF,EAAQO,OAAOJ,EAAIC,UAUnBjD,MAAMA,KAAKqD,gBAAgB9D"}