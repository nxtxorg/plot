{"version":3,"file":"plot.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ninterface Line {\r\n    x:number[],\r\n    y:number[],\r\n    colour?:string\r\n}\r\n\r\ninterface Options {\r\n    y: {\r\n        label?:string,\r\n        postfix?:string,\r\n        prefix?: string,\r\n        decimals?: number,\r\n        values: number[],\r\n\r\n    },\r\n    lines?:Line[]\r\n}\r\n\r\ndeclare const nxtx: INxtx;\r\nconst defaultOptions : Options = {\r\n    y: {\r\n        label:\"\",\r\n        postfix:\"\",\r\n        prefix: \"\",\r\n        decimals: 0,\r\n        values: [],\r\n    },\r\n    lines:[],\r\n};\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (optionsNode: Node) => {\r\n            const options : Options = Object.assign({}, defaultOptions, nxtx.jsArgument(optionsNode));\r\n            //let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n\r\n            const normalizedY = normalize(options.y.values);\r\n            const yLabels = generateYLabels(options.y.values, 10);\r\n            const labelLengths = yLabels.map(x => getStringLength(x));\r\n            const yLabelLength = Math.max(...labelLengths);\r\n            const graphMarginTop = 10;\r\n            const graphMarginBottom = 20;\r\n            const graphMarginRight = 10;\r\n\r\n            let graphMarginLeft = 30;\r\n            if(graphMarginLeft < yLabelLength){\r\n                graphMarginLeft = yLabelLength;\r\n            }\r\n\r\n            const canvasHeight = canvas.height = 220;\r\n            const canvasWidth = canvas.width = 400;\r\n\r\n            const graphHeight = canvasHeight - graphMarginTop - graphMarginBottom;\r\n            const graphWidth = canvasWidth - graphMarginLeft - graphMarginRight;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const spacing = graphWidth / (normalizedY.length - 1);\r\n\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5, 0.5);\r\n\r\n\r\n            ///////////// Y labels\r\n            ctx.textAlign = \"right\";\r\n            const verticalSpacing = graphHeight / (yLabels.length - 1);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < yLabels.length; i++) {\r\n                line(ctx, graphMarginLeft, (verticalSpacing * i) + graphMarginTop, graphMarginLeft + 5, (verticalSpacing * i) + graphMarginTop, 1);\r\n                ctx.fillText(String(yLabels[yLabels.length - (i + 1)]),\r\n                    graphMarginLeft - 4,\r\n                    i * verticalSpacing + graphMarginTop + 4)\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            ///////////// X Labels\r\n            const xMaxAmount = Math.round(graphWidth / 30);\r\n            const xAmount = options.y.values.length;\r\n\r\n            const xSpacing = graphWidth / xAmount;\r\n            ctx.beginPath();\r\n            if(xAmount < xMaxAmount){\r\n                for(let i = 0; i < xAmount+1 ; i++){\r\n                    ctx.fillText((i+1).toString(),(i * xSpacing) + graphMarginLeft+4,canvasHeight-graphMarginBottom+11);\r\n                    line(ctx,(i * xSpacing) + graphMarginLeft,canvasHeight-graphMarginBottom,(i * xSpacing) + graphMarginLeft,canvasHeight-graphMarginBottom-4,1)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for(let i = 0; i < xMaxAmount+1 ; i++){\r\n                    ctx.fillText((i+1).toString(),(i * (graphWidth/xMaxAmount)) + graphMarginLeft+4,canvasHeight-graphMarginBottom+11);\r\n                    line(ctx,(i * (graphWidth/xMaxAmount)) + graphMarginLeft,canvasHeight-graphMarginBottom,(i * (graphWidth/xMaxAmount)) + graphMarginLeft,canvasHeight-graphMarginBottom-4,1)\r\n                }\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            /////// Lines\r\n            for(let i = 0; i < options.lines.length;i++){\r\n                ctx.beginPath();\r\n                ctx.strokeStyle = options.lines[i].colour || \"black\";\r\n                line(ctx,options.lines[i].x[0]+graphMarginLeft,options.lines[i].y[0]+graphMarginTop,options.lines[i].x[1]+graphMarginLeft,options.lines[i].y[1]+graphMarginTop,0.5);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }\r\n            ctx.strokeStyle = \"black\";\r\n\r\n            ///////////// Graph\r\n            ctx.beginPath();\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx, i * spacing + graphMarginLeft, graphHeight - (normalizedY[i] * graphHeight) + graphMarginTop,\r\n                    (i + 1) * spacing + graphMarginLeft, graphHeight - (normalizedY[i + 1] * graphHeight) + graphMarginTop, 1);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n\r\n            //////// Borders\r\n            line(ctx, graphMarginLeft, graphMarginTop, graphMarginLeft, canvasHeight - graphMarginBottom); //left\r\n            line(ctx, canvasWidth - graphMarginRight, graphMarginTop, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //left\r\n\r\n            line(ctx, graphMarginLeft, graphMarginTop, canvasWidth - graphMarginRight, graphMarginTop); //top\r\n            line(ctx, graphMarginLeft, canvasHeight - graphMarginBottom, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //bottom\r\n\r\n\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n\r\n\r\n\r\n\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction generateYLabels(values, amount) {\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const delta = (max - min) / (amount - 1);\r\n    const output = [];\r\n    for (let i = 0; i <= (amount - 1); i++)\r\n        output.push(Math.round(((min + (delta * i))*10))/10);\r\n\r\n    return output;\r\n}\r\n\r\nfunction getStringLength(input) {\r\n    const inputString = input.toString();\r\n     let number = inputString.length * 6 + 4;\r\n     if(input < 0) {\r\n         number -= 2;\r\n     }\r\n     if (inputString.includes('.')) {\r\n        number -= 4;\r\n    }\r\n    return number\r\n}\r\n\r\nfunction line(context, x1, y1, x2, y2, lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\n\r\nif (nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":[],"mappings":"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"}