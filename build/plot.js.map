{"version":3,"file":"plot.js","sources":["../src/plot.ts"],"sourcesContent":["import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            console.log(\"Drawing..\");\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = <HTMLCanvasElement>nxtx.htmlLite(\"canvas\", {});\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const yValue = dictionaryNode.value.y.value.map(e => e.value);\r\n\r\n            const offset = 30;\r\n            const graphMarginTop = 10;\r\n            const graphMarginBottom = 10;\r\n            const graphMarginRight = 10;\r\n            const graphMarginLeft = 30;\r\n\r\n            const canvasHeight = canvas.height = 200;\r\n            const canvasWidth = canvas.width = 400;\r\n\r\n            const graphHeight = canvasHeight - graphMarginTop - graphMarginBottom;\r\n            const graphWidth = canvasWidth - graphMarginLeft - graphMarginRight;\r\n\r\n            canvas.style.margin = \"auto\";\r\n            canvas.style.display = \"block\";\r\n            const normalizedY = normalize(yValue);\r\n            const spacing = graphWidth / (normalizedY.length - 1);\r\n\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.translate(0.5, 0.5);\r\n\r\n\r\n            ///////////// Y labels\r\n            const yLabels = generateYLabels(yValue, 10);\r\n            const verticalSpacing = graphHeight / (yLabels.length - 1);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < yLabels.length; i++) {\r\n                line(ctx, offset, (verticalSpacing * i) + graphMarginTop, offset + 5, (verticalSpacing * i) + graphMarginTop, 1);\r\n                ctx.fillText(String(Math.round(yLabels[i])), graphMarginLeft - (Math.max(...yValue).toString().length * 8), i * verticalSpacing + graphMarginTop + 4);\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            ///////////// X Labels\r\n            const XLabelAmount = Math.round(graphWidth / 30);\r\n\r\n            ///////////// Graph\r\n            ctx.beginPath();\r\n            for (let i = 0; i < normalizedY.length - 1; i++) {\r\n                line(ctx, i * spacing + graphMarginLeft, graphHeight - (normalizedY[i] * graphHeight) + graphMarginTop,\r\n                    (i + 1) * spacing + graphMarginLeft, graphHeight - (normalizedY[i + 1] * graphHeight) + graphMarginTop, 1);\r\n            }\r\n\r\n            ctx.stroke();\r\n            ctx.lineCap = \"round\";\r\n\r\n\r\n            //////// Borders\r\n            line(ctx, graphMarginLeft, graphMarginTop, graphMarginLeft, canvasHeight - graphMarginBottom); //left\r\n            line(ctx, canvasWidth - graphMarginRight, graphMarginTop, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //left\r\n\r\n            line(ctx, graphMarginLeft, graphMarginTop, canvasWidth - graphMarginRight, graphMarginTop); //top\r\n            line(ctx, graphMarginLeft, canvasHeight - graphMarginBottom, canvasWidth - graphMarginRight, canvasHeight - graphMarginBottom); //bottom\r\n\r\n\r\n            ctx.stroke();\r\n            console.log(\"Done drawing\");\r\n\r\n            return canvas;\r\n        }\r\n    },\r\n};\r\n\r\n\r\nfunction generateYLabels(values, amount) {\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const delta = (max - min) / (amount - 1);\r\n    const output = [];\r\n    for (let i = 0; i <= (amount - 1); i++)\r\n        output.push(min + (delta * i));\r\n\r\n    return output;\r\n}\r\n\r\nfunction line(context, x1, y1, x2, y2, lineWidth = 1) {\r\n    context.lineWidth = lineWidth;\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n}\r\n\r\nfunction normalize(array) {\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\n\r\nif (nxtx) nxtx.registerPackage(pkg);\r\n\r\n\r\nexport default pkg;"],"names":[],"mappings":"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"}