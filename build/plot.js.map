{"version":3,"file":"plot.js","sources":["../nxtx.ts","../src/plot.ts"],"sourcesContent":["export interface Node {\n    type: NodeType,\n    value?: any,\n    name?: string,\n    args?: Array<Node>\n}\nexport enum NodeType {\n    Paragraph = 1,\n    Command,\n    Text,\n    Block,\n    Html,\n    Node,\n    Dictionary = 11,\n    Array,\n    Number,\n    String\n}\n\nexport interface ArgumentCheck {\n    expected: NodeType,\n    actual: NodeType,\n    index: number\n}\nexport interface ArgumentCheckResult {\n    ok: boolean,\n    invalid: Array<ArgumentCheck>\n}\n\ntype CommandResultTypes = Node | HTMLElement | Text | undefined | void\ntype CommandResultType = Promise<CommandResultTypes> | CommandResultTypes\nexport type CommandResult = Array<CommandResultType> | CommandResultType\nexport type CommandFunction = (...args:Array<Node>) => CommandResult\n\nexport interface Package {\n    name: string,\n    requires?: Array<string>,\n    commands?: { [name:string]: CommandFunction },\n    preprocessors?: { [name:string]: CommandFunction },\n    hooks?: { prerender?:()=>void, midrender?:()=>void, postrender?:()=>void }\n}\n\nexport type RenderEvent = 'prerender'|'midrender'|'postrender'\n\nexport interface INxtx {\n    registerCommand: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    registerPreprocessor: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    verifyArguments: (types:Array<NodeType>, ...args:Array<Node>) => ArgumentCheckResult\n    registerPackage: (pkg:Package) => void\n\n    parse: (code:string) => Array<Node>\n    render: (code:string, root:HTMLElement) => Promise<void>\n\n    text: (content:string) => Text\n    htmlLite: (nodeName:string, attributes:object, ...children:Array<HTMLElement|string>) => HTMLElement\n    html: (nodeName:string, attributes:object, ...children:Array<Promise<HTMLElement|Node|string>|HTMLElement|Node|string>) => Promise<HTMLElement>\n\n    on: (event:RenderEvent, handler:()=>void) => void\n    off: (event:RenderEvent, handler:()=>void) => void\n}","import {NodeType, INxtx, Package, Node} from '../nxtx';\r\n\r\ndeclare const nxtx: INxtx;\r\n\r\nconst pkg: Package = {\r\n    name: 'plot',\r\n    commands: {\r\n        plot: (dictionaryNode: Node) => {\r\n            let {type, y, ylabel, xlabel} = dictionaryNode.value;\r\n            const canvas = document.createElement(\"canvas\");\r\n\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            const canvasHeight = canvas.height = 100;\r\n            canvas.width = 100;\r\n\r\n            canvas.style.height = \"200px\";\r\n            canvas.style.width = \"400px\";\r\n\r\n            const normalizedY = normalize(y);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < y.length-1; i++) {\r\n                ctx.moveTo(i, y[i] * canvasHeight);\r\n                ctx.lineTo(i+1,y[i+1]*canvasHeight);\r\n                ctx.stroke();\r\n            }\r\n\r\n            return {type:NodeType.Html,value:canvas};\r\n        }\r\n    },\r\n};\r\n\r\nfunction normalize(array) {\r\n\r\n    const min = Math.min(...array);\r\n    const max = Math.max(...array) - min;\r\n    return array.map(e => (e - min) / max);\r\n}\r\nif(nxtx !== undefined)\r\n    nxtx.registerPackage(pkg);\r\nexport default pkg;"],"names":[],"mappings":";;;IAMA,IAAY,QAWX;IAXD,WAAY,QAAQ;QAChB,iDAAa,CAAA;QACb,6CAAO,CAAA;QACP,uCAAI,CAAA;QACJ,yCAAK,CAAA;QACL,uCAAI,CAAA;QACJ,uCAAI,CAAA;QACJ,oDAAe,CAAA;QACf,0CAAK,CAAA;QACL,4CAAM,CAAA;QACN,4CAAM,CAAA;IACV,CAAC,EAXW,QAAQ,KAAR,QAAQ,QAWnB;;ICbD,IAAM,GAAG,GAAY;QACjB,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE;YACN,IAAI,EAAE,UAAC,cAAoB;gBACnB,IAAA,yBAAgD,EAA/C,cAAI,EAAE,QAAC,EAAE,kBAAM,EAAE,kBAA8B,CAAC;gBACrD,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAEhD,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAEpC,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;gBACzC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;gBAEnB,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;gBAE7B,IAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAEjC,GAAG,CAAC,SAAS,EAAE,CAAC;gBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBACjC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;oBACnC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,YAAY,CAAC,CAAC;oBACpC,GAAG,CAAC,MAAM,EAAE,CAAC;iBAChB;gBAED,OAAO,EAAC,IAAI,EAAC,QAAQ,CAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,CAAC;aAC5C;SACJ;KACJ,CAAC;IAEF,SAAS,SAAS,CAAC,KAAK;QAEpB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,KAAK,CAAC,CAAC;QAC/B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,KAAK,IAAI,GAAG,CAAC;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAA,CAAC,CAAC;IAC3C,CAAC;IACD,IAAG,IAAI,KAAK,SAAS;QACjB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;;;;;;;;"}